/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.2.2                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default         backward;
}

gradSchemes
{
    default         Gauss linear;
    grad(p)         Gauss linear;
    grad(U)         Gauss linear;
}

divSchemes
{
    default         none;
    div(phi,U)      Gauss linear;
    /* div(phi,k)      Gauss limitedLinear 1; */
    /* div(phi,epsilon) Gauss limitedLinear 1; */
    /* div(phi,R)      Gauss limitedLinear 1; */
    /* div(R)          Gauss limitedLinear 1; */
    /* div(phi,nuTilda) Gauss limitedLinear 1; */
    /* div((nuEff*dev(T(grad(U))))) Gauss linear; */
}

laplacianSchemes
{
    default         none;
    laplacian(nu,U) Gauss linear corrected;
    laplacian(nuEff,U) Gauss linear corrected;
    laplacian((1|A(U)),p) Gauss linear corrected;
    laplacian(DkEff,k) Gauss linear corrected;
    laplacian(DepsilonEff,epsilon) Gauss linear corrected;
    laplacian(DREff,R) Gauss linear corrected;
    laplacian(DnuTildaEff,nuTilda) Gauss linear corrected;
}

interpolationSchemes
{
    default         linear;
    interpolate(HbyA) linear;
}

snGradSchemes
{
    default         orthogonal;
}

fluxRequired
{
    default         no;
    p               ;
    U ;
}

functions
{
     forces
     {
         type forces;
         functionObjectLibs ("libforces.so");
         outputControl timeStep;
         outputInterval 1;
         patches ( "cyl" );
         pName p;
         UName U;
         rhoName rhoInf;
         log true;
         rhoInf 1;      // Reference density, fluid
         CofR (0 0 0);  // Origin for moment calculations
     }

     forceCoeffs
     {
         type forceCoeffs;
         functionObjectLibs ( "libforces.so" );
         outputControl timeStep;
         outputInterval 1;

         patches     ( "cyl" );
         pName       p;
         UName       U;
         rhoName     rhoInf;      // Indicates incompressible
         rhoInf      1;            // Reference density, fluid
         log         true;
         liftDir     (0 1 0);
         dragDir     (1 0 0);
         CofR        (0 0 0);     // Axle midpoint on ground
         pitchAxis   (0 0 0);
         magUInf     1;
         lRef        1;            // Diameter of cylinder
         Aref        10;        // Ref. Area = cross sectional area
     }
}

// ************************************************************************* //
